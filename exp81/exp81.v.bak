module exp81(
    input wire clk,           // 系统时钟
    input wire rst_n,         // 复位信号，低电平有效
    output reg [7:0] seg,     // 段选信号 (a,b,c,d,e,f,g,dp)
    output reg [2:0] sel      // 位选信号，用于3-8译码器
);

// 分频计数器，用于降低扫描频率
reg [15:0] div_cnt;
wire scan_clk;

// 显示数据存储
reg [3:0] display_data [7:0];  // 8个数码管显示的数据
reg [2:0] scan_cnt;            // 扫描计数器

// 要显示的数字：12345678
localparam [31:0] DISPLAY_NUMBER = 32'd12345678;

// 分频为1kHz扫描时钟
always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
        div_cnt <= 16'd0;
    else
        div_cnt <= div_cnt + 16'd1;
end

assign scan_clk = div_cnt[15];  // 分频后的扫描时钟

// 扫描计数器
always @(posedge scan_clk or negedge rst_n) begin
    if (!rst_n)
        scan_cnt <= 3'd0;
    else
        scan_cnt <= scan_cnt + 3'd1;
end

// 位选信号输出 - 修改为从左到右扫描
always @(posedge scan_clk or negedge rst_n) begin
    if (!rst_n)
        sel <= 3'd7;  // 初始化为最右边
    else
        sel <= 3'd7 - scan_cnt;  // 从右向左扫描
end

// 数字转换为显示数据
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        display_data[0] <= 4'hf;
        display_data[1] <= 4'hf;
        display_data[2] <= 4'hf;
        display_data[3] <= 4'hf;
        display_data[4] <= 4'hf;
        display_data[5] <= 4'hf;
        display_data[6] <= 4'hf;
        display_data[7] <= 4'hf;
    end else begin
        // 从右到左依次提取每一位数字
        display_data[0] <= (DISPLAY_NUMBER >= 10000000) ? (DISPLAY_NUMBER / 10000000) % 10 : 4'hf;
        display_data[1] <= (DISPLAY_NUMBER >= 1000000) ? (DISPLAY_NUMBER / 1000000) % 10 : 4'hf;
        display_data[2] <= (DISPLAY_NUMBER >= 100000) ? (DISPLAY_NUMBER / 100000) % 10 : 4'hf;
        display_data[3] <= (DISPLAY_NUMBER >= 10000) ? (DISPLAY_NUMBER / 10000) % 10 : 4'hf;
        display_data[4] <= (DISPLAY_NUMBER >= 1000) ? (DISPLAY_NUMBER / 1000) % 10 : 4'hf;
        display_data[5] <= (DISPLAY_NUMBER >= 100) ? (DISPLAY_NUMBER / 100) % 10 : 4'hf;
        display_data[6] <= (DISPLAY_NUMBER >= 10) ? (DISPLAY_NUMBER / 10) % 10 : 4'hf;
        display_data[7] <= DISPLAY_NUMBER % 10;
    end
end

// 七段数码管段码生成 - 修改段码定义
always @(*) begin
    case(display_data[scan_cnt])
        4'h0: seg = 8'b00111111;  // 0
        4'h1: seg = 8'b00000110;  // 1
        4'h2: seg = 8'b01011011;  // 2
        4'h3: seg = 8'b01001111;  // 3
        4'h4: seg = 8'b01100110;  // 4
        4'h5: seg = 8'b01101101;  // 5
        4'h6: seg = 8'b01111101;  // 6
        4'h7: seg = 8'b00000111;  // 7
        4'h8: seg = 8'b01111111;  // 8
        4'h9: seg = 8'b01101111;  // 9
        4'hf: seg = 8'b01000000;  // "-"
        default: seg = 8'b00000000;
    endcase
end

endmodule